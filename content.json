{"pages":[],"posts":[{"title":"vue的插槽","text":"1. v-slotvue插槽有两种：具名插槽和作用域插槽，2.6.0以后，使用新语法v-slot指令（缩写为#）将两种语法统一起来。 老旧的语法，这里不再赘述，参见vue官网。下面讲讲新语法的用法。 12345678910&lt;!-- 后备内容显示用户的名，以取代正常情况下用户的姓 --&gt;&lt;!-- 父组件 --&gt;&lt;!-- 要用template包裹，slot名称为slotName（具名插槽），放入对应名称的插槽位置(子组件未给name属性，父组件写default）； --&gt; &lt;!-- 接收子组件传入的属性传入属性，并命名为slotProps（作用域插槽），父级作用域中就可以使用子组件中传入的属性。（这里父级接收时可以使用解构语法） --&gt;&lt;current-user&gt; &lt;template v-slot:slotName=\"slotProps\"&gt; {{ slotProps.user.firstName }} &lt;/template&gt;&lt;/current-user&gt; 1234567&lt;!-- 子组件current-user中 --&gt;&lt;span&gt; &lt;slot name=\"slotName\" v-bind:user=\"user\"&gt; &lt;!-- 父组件未传入插槽内容时，使用这里的默认内容 --&gt; {{ user.lastName }} &lt;/slot&gt;&lt;/span&gt; 2. v-slot缩写 跟 v-on 和 v-bind 一样，v-slot 也有缩写，即把参数之前的所有内容 (v-slot:) 替换为字符 #。例如 v-slot:header 可以被重写为 #header 你希望使用缩写的话，你必须始终以明确插槽名取而代之。即使子组件未给slot明确的name属性。123&lt;current-user #default=\"{ user }\"&gt; {{ user.firstName }}&lt;/current-user&gt; 12345&lt;span&gt; &lt;slot v-bind:user=\"user\"&gt;&lt;/slot&gt; {{ user.lastName }} &lt;/slot&gt;&lt;/span&gt; 3. 动态插槽名动态指令参数也可以用在 v-slot 上，来定义动态的插槽名： 12345&lt;base-layout&gt; &lt;template v-slot:[dynamicSlotName]&gt; ... &lt;/template&gt;&lt;/base-layout&gt;","link":"/2019/12/12/vue的插槽/"},{"title":"hexo使用说明","text":"简要流程12345hexo serverhexo new &lt;title&gt;hexo cleanhexo ghexo d 1.开启本地服务1hexo server 2.文章postlayout种类和创建文章1hexo new [layout] &lt;title&gt; layout可选，有3种， 默认为post，还可为page和draft。 3.草稿draft1）创建草稿1hexo new draft &lt;title&gt; 2）发布草稿_draft文件夹里是草稿文件，可以使用如下命令将draft转为post： 1hexo publish &lt;draftTitle&gt; 4.模版ScaffoldHexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如： 1hexo new photo \"My Gallery\" 即：Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章。 5.页面page我目前还不知道该如何用中文称呼这类页面。我们可以把post和draft统称为blog pages，在这之外的一种就是normal pages， 类似一个网站上的“关于”，“了解我们”之类的页面。 创建page s1hexo new page c 和前两种不同，这个命令会在source文件夹内创建出c文件夹，与_posts，_drafts并列。文件夹里面有一个index.md文件。 刷新页面，你会发现c并没有出现在页面内，那它在哪儿呢？ 在网址后面加上c/， 即http://localhost:4000/c/，就可以看到了。 正因为c不是一个blog page，所以它也不会出现在blog列表中，而是要通过URL去access。 6.修改默认设置为什么一开始的时候我们用 1hexo new &lt;title&gt; 就直接生成了post page呢？因为默认的设置。 打开熟悉的_config.yml文件，找到 1default_layout: post 这句表示默认的页面会新建成post格式的。 所以，如果你习惯先把文章写成草稿，那就把它改成draft就好。 1default_layout: draft 7.部署到github打开站点配置文件 _config.yml，翻到最后，修改为YourgithubName就是你的GitHub账户 deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master ``` s 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。 ```bash npm install hexo-deployer-git --save然后 hexo clean hexo generate hexo deploy 其中 hexo clean清除了你之前生成的东西，也可以不加。hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写hexo deploy 部署文章，可以用hexo d缩写 注意deploy时可能要你输入username和password。 得到下图就说明部署成功了，过一会儿就可以在http://yourname.github.io 这个网站看到你的博客了！！","link":"/2019/10/13/hexo使用说明/"},{"title":"初识Java","text":"1. 简介Java是跨平台语言，运行在虚拟机JVM上，JVM又运行在相应的系统上。开发我们需要先安装JDK（java delelopment kit），即Java开发工具包，其中包括了JVM，也包括了JRE（java runtime environment）Java运行环境。 JavaSE: 标准版，定义了Java的基本语法。JavaME：移动版，现已基本不用，用在GPS导航、机顶盒、塞班系统等。JavaEE: 企业版，如用JavaWeb开发企业级B/S架构应用。 企业级应用常见两种架构： B/S架构：broswer server。例如淘宝网 C/S架构：client server。例如微信、QQ 2. 编写Java程序1）编写：编写Java源代码，即编写”.java”的文件。（程序员）2）编译：将Java源代码编译成计算机能够识别的字节码文件（16进制），文件所在文件夹的命令行中运行javac 文件名.java编译该文件,成功后生成’文件名.class’的字节码文件 。（JVM编译器）3）运行：运行Java程序，命令行中运行java 文件名即可，注意不需要带文件名后缀class。（JVM） 12345public class MyFirstDemo { public static void main (String[] args) { System.out.print(\"Hello World!\"); }} 常见错误：1.每次修改代码都要重新编译。2.类名与文件名不一致。3.关键字写错。4.关键字的顺序写错。 3. 开发工具eclipse新建一个Java project（配置name和JRE），之后会生成src（编写自己的class）和JRE System Library（包含很多基础类）。点击run as java application即可运行，在工作空间文件夹中生成bin（存’.java’)和src文件夹(存’.class’)。 IDEA更好用，代码提示更加智能。","link":"/2019/12/13/初识Java/"}],"tags":[{"name":"前端 vue 知识点","slug":"前端-vue-知识点","link":"/tags/前端-vue-知识点/"},{"name":"读书笔记","slug":"读书笔记","link":"/tags/读书笔记/"},{"name":"其它","slug":"其它","link":"/tags/其它/"},{"name":"后端 JavaSE","slug":"后端-JavaSE","link":"/tags/后端-JavaSE/"}],"categories":[{"name":"前端","slug":"前端","link":"/categories/前端/"},{"name":"后端","slug":"后端","link":"/categories/后端/"}]}